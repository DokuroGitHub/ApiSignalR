// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace _3.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230519022641_update2")]
    partial class update2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastMessageId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Conversation_Id");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasFilter("[LastMessageId] IS NOT NULL");

                    b.ToTable("Conversation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            DeletedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            DeletedBy = 1,
                            Description = "Nhóm luyện ngục dotnet",
                            PhotoUrl = "https://i.pinimg.com/736x/eb/b4/24/ebb4240e278b99f7ec49a5a51980e187.jpg",
                            Title = "Nhóm 1",
                            UpdatedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Nhóm luyện ngục dotnet v1.1",
                            PhotoUrl = "https://wallpapers.com/images/hd/anime-profile-picture-jioug7q8n43yhlwn.jpg",
                            Title = "Nhóm 1.1",
                            UpdatedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Nhóm luyện ngục dotnet v1.3",
                            PhotoUrl = "https://aniyuki.com/wp-content/uploads/2022/03/aniyuki-anime-girl-avatar-51.jpg",
                            Title = "Nhóm 1.3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ConversationBlock", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("ConversationId", "UserId", "CreatedBy")
                        .HasName("PK_ConversationBlock_ConversationId_UserId_CreatedBy");

                    b.ToTable("ConversationBlock", (string)null);

                    b.HasData(
                        new
                        {
                            ConversationId = 2,
                            UserId = 2,
                            CreatedBy = 1,
                            CreatedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ConversationInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("JudgedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ConversationInvitation_Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ConversationInvitation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            ConversationId = 1,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            JudgedBy = 2,
                            Role = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            AcceptedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            JudgedBy = 2,
                            Role = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            JudgedBy = 3,
                            RejectedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            Role = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Role = 0,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.DeletedMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("MessageId", "CreatedBy")
                        .HasName("PK_DeletedMessage_MessageId_CreatedBy");

                    b.ToTable("DeletedMessage", (string)null);

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            CreatedBy = 1,
                            CreatedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Message_Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReplyTo");

                    b.ToTable("Message", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConversationId = 1,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1
                        },
                        new
                        {
                            Id = 2,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            UpdatedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 2,
                            ReplyTo = 2
                        },
                        new
                        {
                            Id = 4,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            DeletedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            DeletedBy = 1,
                            UpdatedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.MessageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("PK_MessageAttachment_Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileUrl = "https://i.pinimg.com/736x/eb/b4/24/ebb4240e278b99f7ec49a5a51980e187.jpg",
                            MessageId = 2,
                            ThumbUrl = "https://i.pinimg.com/736x/eb/b4/24/ebb4240e278b99f7ec49a5a51980e187.jpg",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            FileUrl = "https://i.pinimg.com/736x/eb/b4/24/ebb4240e278b99f7ec49a5a51980e187.jpg",
                            MessageId = 3,
                            ThumbUrl = "https://i.pinimg.com/736x/eb/b4/24/ebb4240e278b99f7ec49a5a51980e187.jpg",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.MessageEmote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MessageEmote_Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageEmote", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 0,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            MessageId = 2
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 2,
                            MessageId = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = 1,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            MessageId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Participant_Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Participant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConversationId = 1,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Role = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Nickname = "Admin hiền lành",
                            Role = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Nickname = "Member số 1",
                            Role = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Role = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            ConversationId = 2,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            DeletedAt = new DateTime(2023, 4, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            DeletedBy = 1,
                            Role = 0,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.TodoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("Domain.Entities.TodoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("\r\nCASE\r\n    WHEN [FirstName] IS NOT NULL AND [FirstName] <> ''\r\n        THEN CASE\r\n  			WHEN [LastName] IS NOT NULL AND [LastName] <> '' \r\n       			THEN [FirstName] + ' ' + [LastName]\r\n       		ELSE [FirstName]\r\n  		END\r\n    WHEN [LastName] IS NOT NULL AND [LastName] <> '' THEN [LastName]\r\n    WHEN [Email] IS NOT NULL AND [Email] <> '' THEN [Email]\r\n	ELSE CAST([Id] AS varchar)\r\nEND", false);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Money")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("user");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK_User_Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email");

                    b.HasIndex(new[] { "Username" }, "IX_User_Username")
                        .IsUnique();

                    b.ToTable("User", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_Money", "[Money] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Email = "tamthoidetrong@gmail.com",
                            FirstName = "Võ",
                            LastName = "Thành Đô",
                            Money = 1999999999m,
                            PasswordHash = "$2a$11$2PJMSufmjtIbktnDZ8nbHejByAc9I.wkVQx9u.uzlyye8NhEPMNl6",
                            Role = "admin",
                            UpdatedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            UpdatedBy = 1,
                            Username = "tamthoidetrong@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 5, 30, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Email = "dokuro.jp@gmail.com",
                            FirstName = "Dokuro",
                            LastName = "JP",
                            Money = 69m,
                            PasswordHash = "$2a$11$2PJMSufmjtIbktnDZ8nbHejByAc9I.wkVQx9u.uzlyye8NhEPMNl6",
                            Role = "user",
                            UpdatedAt = new DateTime(2023, 5, 5, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            Username = "dokuro.jp@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 5, 5, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Email = "dovt58@gmail.com",
                            FirstName = "dovt58",
                            LastName = "GG",
                            ManagerId = 2,
                            Money = 0m,
                            PasswordHash = "$2a$11$2PJMSufmjtIbktnDZ8nbHejByAc9I.wkVQx9u.uzlyye8NhEPMNl6",
                            Role = "user",
                            UpdatedAt = new DateTime(2023, 5, 6, 15, 1, 1, 0, DateTimeKind.Unspecified),
                            UpdatedBy = 1,
                            Username = "dovt58@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Conversation", b =>
                {
                    b.HasOne("Domain.Entities.Message", "LastMessage")
                        .WithOne("LastMessageOfConversation")
                        .HasForeignKey("Domain.Entities.Conversation", "LastMessageId")
                        .HasConstraintName("FK_Conversation_LastMessageId");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("Domain.Entities.ConversationBlock", b =>
                {
                    b.HasOne("Domain.Entities.Conversation", "Conversation")
                        .WithMany("Blocks")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConversationBlock_ConversationId");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Domain.Entities.ConversationInvitation", b =>
                {
                    b.HasOne("Domain.Entities.Conversation", "Conversation")
                        .WithMany("Invitations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConversationInvitation_ConversationId");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Domain.Entities.DeletedMessage", b =>
                {
                    b.HasOne("Domain.Entities.Message", "Message")
                        .WithMany("DeletedMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeletedMessage_MessageId");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_Message_ConversationId");

                    b.HasOne("Domain.Entities.Message", "ReplyToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyTo")
                        .HasConstraintName("FK_Message_ReplyTo");

                    b.Navigation("Conversation");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("Domain.Entities.MessageAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MessageAttachment_MessageId");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Entities.MessageEmote", b =>
                {
                    b.HasOne("Domain.Entities.Message", "Message")
                        .WithMany("Emotes")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_MessageEmote_MessageId");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.HasOne("Domain.Entities.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_Participant_ConversationId");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<int>("TodoListId")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK_User_CreatedBy");

                    b.HasOne("Domain.Entities.User", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_User_ManagerId");

                    b.HasOne("Domain.Entities.User", "Updater")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_User_UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Manager");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Invitations");

                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("DeletedMessages");

                    b.Navigation("Emotes");

                    b.Navigation("LastMessageOfConversation");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedUsers");

                    b.Navigation("Employees");

                    b.Navigation("UpdatedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
